#!/bin/sh

commit_msg_file=$1
commit_msg=$(cat "$commit_msg_file")

# -----------------------------------------------------------------------------
# -m 옵션 방지
# -----------------------------------------------------------------------------

if ! grep -q "^#" "$commit_msg_file"; then
    echo "❌ 'git commit -m' 옵션은 사용할 수 없습니다."
    echo "
💡 다음과 같이 합니다.
1. git commit (엔터)
2. 템플릿에 맞춰 커밋 메세지 작성
3. 저장 후 종료
"
    exit 1
fi

# -----------------------------------------------------------------------------
# 이슈 ID 추출 및 자동 추가
# -----------------------------------------------------------------------------

# 브랜치 이름 가져오기
branch_name=$(git symbolic-ref --short HEAD 2>/dev/null || echo "")

# 이슈 ID 추출 (예: #1)
issue_id=$(echo "$branch_name" | LANG=C grep -oE '#[0-9]+' || echo "")
echo "🔍 추출된 이슈 ID: $issue_id"

branch_name=$(git symbolic-ref --short HEAD 2>/dev/null || echo "")


# 주석 제외한 커밋 메시지
filtered_msg=$(echo "$commit_msg" | grep -v '^#')

# 이슈 ID가 있고, 메시지에 없는 경우 추가
if [ ! -z "$issue_id" ] && ! echo "$filtered_msg" | grep -q "\[$issue_id\]"; then
    # 주석 라인을 제외하고 이슈 ID를 앞에 추가
    new_msg="[$issue_id] $filtered_msg"
    echo "$new_msg" > "$commit_msg_file"

    # 주석 붙이기
    echo "" >> "$commit_msg_file"
    echo "# ------------------------" >> "$commit_msg_file"
    echo "$commit_msg" | grep '^#' >> "$commit_msg_file"
fi

# -----------------------------------------------------------------------------
# 커밋 메세지 패턴 검사
# -----------------------------------------------------------------------------

commit_msg=$(cat "$commit_msg_file")
filtered_msg=$(echo "$commit_msg" | grep -v '^#')

# 패턴: [#1] feat: 메시지
if ! echo "$filtered_msg" | grep -qE '^\[#([0-9]+)\]\s+(feat|fix|docs|refactor|test|config|design|edit): .+'; then
    echo "$filtered_msg"
    echo "❌ 잘못된 커밋 메세지 형식입니다."
    echo "
올바른 커밋 메세지 예시:
[#1] feat: 초기 설정 구성
"
    exit 1
fi
